/**
 * Shared types and interfaces for VibeForge platform
 */

export enum Blueprint {
  SERVERLESS = 'serverless',
  CONTAINERS = 'containers',
}

export enum Environment {
  DEV = 'dev',
  PROD = 'prod',
}

/**
 * Application specification generated by Bedrock
 */
export interface AppSpec {
  name: string;
  blueprint: Blueprint;
  pages: PageSpec[];
  api: ApiEndpointSpec[];
  dataModel: DataModelSpec[];
  auth: boolean;
  envVars: EnvVarSpec[];
  customDomain?: boolean;
  generatedCode?: GeneratedCode;
}

export interface PageSpec {
  route: string;
  components: string[];
  title?: string;
}

export interface GeneratedCode {
  pages: Record<string, string>; // route -> TSX code
  components: Record<string, string>; // component name -> TSX code
  lib: Record<string, string>; // utility file name -> TS code
}

export interface ApiEndpointSpec {
  path: string;
  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
  handler: string;
  description?: string;
  requiresAuth?: boolean;
}

export interface DataModelSpec {
  table: string;
  partitionKey: string;
  sortKey?: string;
  attributes: AttributeSpec[];
  secondaryIndexes?: SecondaryIndexSpec[];
}

export interface AttributeSpec {
  name: string;
  type: 'string' | 'number' | 'boolean' | 'list' | 'map';
  required?: boolean;
}

export interface SecondaryIndexSpec {
  name: string;
  partitionKey: string;
  sortKey?: string;
  projectionType?: 'ALL' | 'KEYS_ONLY' | 'INCLUDE';
}

export interface EnvVarSpec {
  name: string;
  description: string;
  required?: boolean;
  defaultValue?: string;
}

/**
 * Stack outputs from CloudFormation
 */
export interface StackOutputs {
  [key: string]: string;
}

export interface DeploymentResult {
  stackName: string;
  environment: Environment;
  outputs: StackOutputs;
  previewUrl?: string;
  prodUrl?: string;
  apiUrl?: string;
  status: 'success' | 'failed';
  error?: string;
}

/**
 * App manifest stored in .vibe/manifest.json
 */
export interface AppManifest {
  appId: string;
  appName: string;
  blueprint: Blueprint;
  spec: AppSpec;
  accountId: string;
  region: string;
  createdAt: string;
  updatedAt: string;
  deployments: {
    dev?: DeploymentResult;
    prod?: DeploymentResult;
  };
}

/**
 * Connection configuration
 */
export interface ConnectionConfig {
  tenantId: string;
  accountId: string;
  region: string;
  roleArn: string;
  externalId: string;
  verifiedAt?: string;
}

/**
 * API Request/Response types
 */
export interface InitResponse {
  tenantId: string;
  defaultRegion: string;
  roleName: string;
  controlPlaneAccountId: string;
  connected: boolean;
  roleArn?: string;
}

export interface ConnectUrlRequest {
  region: string;
}

export interface ConnectUrlResponse {
  url: string;
}

export interface CheckConnectionRequest {
  accountId: string;
  region?: string;
}

export interface CheckConnectionResponse {
  ok: boolean;
  roleArn?: string;
  error?: string;
}

export interface GenerateRequest {
  accountId: string;
  region: string;
  blueprint: Blueprint;
  prompt: string;
  appName: string;
}

export interface GenerateResponse {
  appId: string;
  spec: AppSpec;
  previewUrl: string;
  stackName: string;
  outputs: StackOutputs;
}

export interface PublishRequest {
  accountId: string;
  region: string;
  appId: string;
  confirm: boolean;
}

export interface PublishResponse {
  prodUrl: string;
  stackName: string;
  outputs: StackOutputs;
}

export interface AppListItem {
  appId: string;
  appName: string;
  blueprint: Blueprint;
  devUrl?: string;
  prodUrl?: string;
  createdAt: string;
}

export interface DestroyRequest {
  accountId: string;
  region: string;
  appId: string;
  env: Environment;
  confirm: boolean;
}

export interface DestroyResponse {
  ok: boolean;
  message: string;
}

/**
 * Error types
 */
export interface ApiError {
  error: string;
  message: string;
  details?: any;
}

export class BedrockAccessError extends Error {
  constructor(
    public region: string,
    public modelId: string,
    message?: string
  ) {
    super(
      message ||
        `Access denied to Bedrock model in ${region}. For Anthropic models, first-time users may need to submit use case details. Go to AWS Console → Bedrock → Model catalog, select ${modelId}, and try it in the playground to complete setup.`
    );
    this.name = 'BedrockAccessError';
  }
}

export class AssumeRoleError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'AssumeRoleError';
  }
}

export class DeploymentError extends Error {
  constructor(
    message: string,
    public details?: any
  ) {
    super(message);
    this.name = 'DeploymentError';
  }
}
